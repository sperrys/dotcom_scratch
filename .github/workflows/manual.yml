name: Manual workflow

on:
  workflow_dispatch:

jobs:
  update-markdown-assets:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyGithub gitpython requests

    - name: Update markdown asset references
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO_NAME: sperrys/dotcom_scratch
        BRANCH_NAME: add-markdown-scanner-${{ github.run_id }}
        ASSETS_FOLDER: assets
        PR_TITLE: "Update asset references"
        PR_BODY: "This PR updates the asset references in markdown files."
      run: |
        python << 'EOF'
        import os
        import re
        import requests
        from pathlib import Path
        from github import Github
        import git

        # URL Patterns to Search
        URL_PATTERNS = [
            re.compile(r'(https://example.com/assets/[\\w\\d\\-_]+\\.(png|jpg|jpeg|gif|svg))')
        ]

        # Initialize GitHub
        g = Github(os.environ['GITHUB_TOKEN'])
        repo = g.get_repo(os.environ['REPO_NAME'])

        # Clone the Repo
        repo_dir = Path(os.environ['REPO_NAME'].split('/')[1])
        if repo_dir.exists():
            repo_dir.rmdir()
        repo = git.Repo.clone_from(f'https://github.com/{os.environ["REPO_NAME"]}.git', repo_dir)
        origin = repo.remote(name='origin')

        # Create and checkout the new branch
        repo.git.checkout('HEAD', b=os.environ['BRANCH_NAME'])

        # Ensure the assets folder exists
        assets_path = repo_dir / os.environ['ASSETS_FOLDER']
        assets_path.mkdir(parents=True, exist_ok=True)

        # Scan and replace URLs in markdown files
        for md_file in repo_dir.glob('**/*.md'):
            with open(md_file, 'r', encoding='utf-8') as file:
                content = file.read()
            
            new_content = content
            for pattern in URL_PATTERNS:
                matches = pattern.findall(content)
                for match in matches:
                    url = match[0]
                    filename = url.split('/')[-1]
                    local_path = assets_path / filename

                    # Download the asset
                    response = requests.get(url)
                    with open(local_path, 'wb') as asset_file:
                        asset_file.write(response.content)

                    # Replace URL with relative path
                    new_content = new_content.replace(url, f'{os.environ["ASSETS_FOLDER"]}/{filename}')
            
            # Write the updated content back to the file
            if new_content != content:
                with open(md_file, 'w', encoding='utf-8') as file:
                    file.write(new_content)

                # Commit the changes
                repo.index.add([str(md_file)])
                repo.index.commit(f'Update asset references in {md_file.name}')

        # Push the new branch to the remote
        origin.push(os.environ['BRANCH_NAME'])

        # Create a pull request
        user = g.get_user()
        repo = user.get_repo(os.environ['REPO_NAME'].split('/')[1])
        repo.create_pull(title=os.environ['PR_TITLE'], body=os.environ['PR_BODY'], head=os.environ['BRANCH_NAME'], base='main')
        EOF
